openapi: 3.0.3
info:
  title: E-Commerce REST API
  version: 1.0.0
  description: Minimal but complete spec for users, products, carts, and orders.
servers:
  - url: http://localhost:3000/api/v1

tags:
  - name: Auth
  - name: Users
  - name: Addresses
  - name: Categories
  - name: Products
  - name: Cart
  - name: Orders
  - name: Payments

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409': { description: Email already in use }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401': { description: Invalid credentials }

  /users/me:
    get:
      tags: [Users]
      summary: Get current user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    put:
      tags: [Users]
      summary: Update current user
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /users/me/addresses:
    get:
      tags: [Addresses]
      summary: List my addresses
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Address' }
    post:
      tags: [Addresses]
      summary: Create address
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddressCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Address' }

  /users/me/addresses/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    put:
      tags: [Addresses]
      summary: Update address
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AddressUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Address' }
    delete:
      tags: [Addresses]
      summary: Delete address
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Deleted }

  /categories:
    get:
      tags: [Categories]
      summary: List categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Category' }
    post:
      tags: [Categories]
      summary: Create category (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }

  /categories/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    put:
      tags: [Categories]
      summary: Update category (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CategoryUpdate' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Category' }
    delete:
      tags: [Categories]
      summary: Delete category (admin)
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Deleted }

  /products:
    get:
      tags: [Products]
      summary: List products
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: categoryId
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Product' }
                  paging:
                    $ref: '#/components/schemas/Paging'
    post:
      tags: [Products]
      summary: Create product (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }

  /products/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Products]
      summary: Get product by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
        '404': { description: Not found }
    put:
      tags: [Products]
      summary: Update product (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Product' }
    delete:
      tags: [Products]
      summary: Archive product (admin)
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Archived }

  /products/{id}/images:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Products]
      summary: List product images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ProductImage' }
    post:
      tags: [Products]
      summary: Add product image (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductImageCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductImage' }

  /product-images/{imageId}:
    parameters:
      - in: path
        name: imageId
        required: true
        schema: { type: integer }
    delete:
      tags: [Products]
      summary: Delete product image (admin)
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Deleted }

  /cart:
    get:
      tags: [Cart]
      summary: Get my cart (auto-created)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Cart' }
    delete:
      tags: [Cart]
      summary: Clear cart
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Cleared }

  /cart/items:
    post:
      tags: [Cart]
      summary: Add or update item (upsert)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CartItemUpsert' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Cart' }

  /cart/items/{itemId}:
    parameters:
      - in: path
        name: itemId
        required: true
        schema: { type: integer }
    put:
      tags: [Cart]
      summary: Change item quantity
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity: { type: integer, minimum: 1 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Cart' }
    delete:
      tags: [Cart]
      summary: Remove item
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Removed }

  /orders:
    get:
      tags: [Orders]
      summary: List my orders
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Order' }
    post:
      tags: [Orders]
      summary: Place order from current cart
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }

  /orders/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
    get:
      tags: [Orders]
      summary: Get my order by id
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
        '404': { description: Not found }

  /orders/{id}/payments:
    post:
      tags: [Payments]
      summary: Create payment (stub)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Payment' }
    get:
      tags: [Payments]
      summary: List payments for an order
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Payment' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Paging:
      type: object
      properties:
        limit: { type: integer }
        offset: { type: integer }
        total: { type: integer }

    AuthToken:
      type: object
      properties:
        token: { type: string }

    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        fullName: { type: string }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    User:
      type: object
      properties:
        id: { type: integer }
        email: { type: string, format: email }
        full_name: { type: string }
        phone: { type: string }
        created_at: { type: string, format: date-time }

    UserUpdate:
      type: object
      properties:
        full_name: { type: string }
        phone: { type: string }

    Address:
      type: object
      properties:
        id: { type: integer }
        label: { type: string }
        line1: { type: string }
        line2: { type: string }
        city: { type: string }
        region: { type: string }
        postal_code: { type: string }
        country_code: { type: string, example: US }
        is_default_billing: { type: boolean }
        is_default_shipping: { type: boolean }

    AddressCreate:
      allOf:
        - $ref: '#/components/schemas/Address'
      required:
        - line1
        - city
        - postal_code
        - country_code

    AddressUpdate:
      $ref: '#/components/schemas/AddressCreate'

    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        slug: { type: string }
        parent_id: { type: integer, nullable: true }

    CategoryCreate:
      type: object
      required: [name, slug]
      properties:
        name: { type: string }
        slug: { type: string }
        parent_id: { type: integer, nullable: true }

    CategoryUpdate:
      $ref: '#/components/schemas/CategoryCreate'

    Product:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        price_cents: { type: integer, minimum: 0 }
        category_id: { type: integer, nullable: true }
        sku: { type: string }
        is_active: { type: boolean }
        created_at: { type: string, format: date-time }

    ProductCreate:
      type: object
      required: [title, price_cents]
      properties:
        title: { type: string }
        description: { type: string }
        price_cents: { type: integer, minimum: 0 }
        category_id: { type: integer, nullable: true }
        sku: { type: string }

    ProductUpdate:
      $ref: '#/components/schemas/ProductCreate'

    ProductImage:
      type: object
      properties:
        id: { type: integer }
        product_id: { type: integer }
        url: { type: string }
        alt: { type: string }
        position: { type: integer }

    ProductImageCreate:
      type: object
      required: [url]
      properties:
        url: { type: string }
        alt: { type: string }
        position: { type: integer }

    Cart:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/CartItem' }
        subtotal_cents: { type: integer }
        created_at: { type: string, format: date-time }

    CartItem:
      type: object
      properties:
        id: { type: integer }
        product_id: { type: integer }
        title: { type: string }
        unit_price_cents: { type: integer }
        quantity: { type: integer, minimum: 1 }

    CartItemUpsert:
      type: object
      required: [productId, quantity]
      properties:
        productId: { type: integer }
        quantity: { type: integer, minimum: 1 }

    Order:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        status:
          type: string
          enum: [pending, paid, shipped, delivered, cancelled, refunded]
        subtotal_cents: { type: integer }
        shipping_cents: { type: integer }
        tax_cents: { type: integer }
        total_cents: { type: integer }
        billing_address_id: { type: integer, nullable: true }
        shipping_address_id: { type: integer, nullable: true }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        placed_at: { type: string, format: date-time }

    OrderItem:
      type: object
      properties:
        id: { type: integer }
        product_id: { type: integer, nullable: true }
        title_snapshot: { type: string }
        unit_price_cents: { type: integer }
        quantity: { type: integer }

    OrderCreate:
      type: object
      description: >
        Places an order from current cart. Server will recompute totals and
        decrement inventory. Client may optionally provide address ids.
      properties:
        billing_address_id: { type: integer }
        shipping_address_id: { type: integer }

    Payment:
      type: object
      properties:
        id: { type: integer }
        order_id: { type: integer }
        provider: { type: string, example: stripe }
        provider_ref: { type: string }
        amount_cents: { type: integer }
        status: { type: string, example: succeeded }
        created_at: { type: string, format: date-time }

    PaymentCreate:
      type: object
      required: [provider, amount_cents]
      properties:
        provider: { type: string }
        amount_cents: { type: integer, minimum: 0 }
